# you will find the build script
# for the image in ci/docker/Dockerfile
image: zauberstuhl/ganggo-ci:1.9-stretch
services:
- postgres:latest
variables:
  POSTGRES_DB: ganggo
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ""
  UPDATE_CHANNEL: alpha
stages:
- dependency
- test
- package
artifacts:
  name: "$UPDATE_CHANNEL"
  expire_in: "1 day"
  paths:
  - updater.*.bin
before_script:
- export VERSION=$(git describe --abbrev=0 --tags)
- mkdir -p $GOPATH/src/github.com/ganggo
- ln -s $(pwd) $GOPATH/src/github.com/ganggo/ganggo
install dependencies:
  stage: dependency
  cache:
    key: "ganggo-$CI_PIPELINE_ID"
    paths:
    - vendor
    - node_modules
  script:
  - make install
run unit tests:
  stage: test
  cache:
    key: "ganggo-$CI_PIPELINE_ID"
    paths:
    - vendor
    - node_modules
    policy: pull
  script:
  - make test
build with GOARCH=amd64 GOOS=linux:
  stage: package
  cache:
    key: "ganggo-$CI_PIPELINE_ID"
    paths:
    - vendor
    - node_modules
    policy: pull
  script:
  - export GOARCH=amd64
  - export GOOS=linux
  - make release
build with GOARCH=amd64 GOOS=windows:
  stage: package
  cache:
    key: "ganggo-$CI_PIPELINE_ID"
    paths:
    - vendor
    - node_modules
    policy: pull
  script:
  - export CGO_ENABLED=1
  - export CXX=x86_64-w64-mingw32-g++
  - export CC=x86_64-w64-mingw32-gcc
  - export GOARCH=amd64
  - export GOOS=windows
  - make release
build with GOARCH=386 GOOS=windows:
  stage: package
  cache:
    key: "ganggo-$CI_PIPELINE_ID"
    paths:
    - vendor
    - node_modules
    policy: pull
  script:
  - export CGO_ENABLED=1
  - export CXX=i686-w64-mingw32-g++
  - export CC=i686-w64-mingw32-gcc
  - export GOARCH=386
  - export GOOS=windows
  - make release
build with GOARCH=arm GOOS=linux GOARM=7:
  stage: package
  cache:
    key: "ganggo-$CI_PIPELINE_ID"
    paths:
    - vendor
    - node_modules
    policy: pull
  script:
  - export CGO_ENABLED=1
  - export CC=arm-linux-gnueabihf-gcc
  - export GOARCH=arm
  - export GOOS=linux
  - export GOARM=7
  - make release
